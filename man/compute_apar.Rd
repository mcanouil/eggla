% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_apar.R
\name{compute_apar}
\alias{compute_apar}
\title{Compute adiposity peak (AP) and adiposity rebound (AR).}
\usage{
compute_apar(
  fit,
  from = c("predicted", "observed"),
  start = 0.25,
  end = 10,
  step = 0.05,
  filter = NULL
)
}
\arguments{
\item{fit}{A model object from a statistical model
such as from a call \code{nlme::lme()}, \code{time_model()} or \code{egg_model()}.}

\item{from}{A string indicating the type of data to be used for the AP and AR
computation, either "predicted" or "observed". Default is "predicted".}

\item{start}{The start of the time window to compute AP and AR.}

\item{end}{The end of the time window to compute AP and AR.}

\item{step}{The step to increment the sequence.}

\item{filter}{A string following \code{data.table} syntax for filtering on \code{"i"}
(\emph{i.e.}, row elements), \emph{e.g.}, \code{filter = "source == 'A'"}.
Default is \code{NULL}.}
}
\value{
A \code{data.table} object.
}
\description{
Compute adiposity peak (AP) and adiposity rebound (AR).
}
\examples{
data("bmigrowth")
res <- egg_model(
  formula = log(bmi) ~ age,
  data = bmigrowth[bmigrowth[["sex"]] == 0, ],
  id_var = "ID",
  random_complexity = 1
)

head(compute_apar(fit = res, from = "predicted")[AP | AR])

# Comparing observed and predicted values
library(data.table)
library(ggplot2)
library(patchwork)
list_gg <- melt(
  data = rbindlist(
    l = lapply(
      X = (function(.x) `names<-`(.x, .x))(c("predicted", "observed")),
      FUN = compute_apar,
      fit = res
    ),
    idcol = "from"
  )[
    AP | AR
  ][
    j = what := fifelse(paste(AP, AR) \%in\% paste(FALSE, TRUE), "AR", "AP")
  ],
  id.vars = c("from", "egg_id", "what"),
  measure.vars = c("egg_ageyears", "egg_bmi")
)[
  j = list(gg = list({
    dt <- dcast(data = .SD, formula = egg_id + what ~ from)
    range_xy <- range(dt[, c("observed", "predicted")], na.rm = TRUE)
    ggplot(data = dt) +
      aes(x = observed, y = predicted, colour = what) +
      geom_abline(intercept = 0, slope = 1) +
      geom_segment(aes(xend = observed, yend = observed), alpha = 0.5) +
      geom_point() +
      scale_colour_manual(values = c("#b22222", "#22b222")) +
      theme_minimal() +
      theme(
        axis.line = element_line(colour = "grey20", size = rel(1)),
        axis.ticks = element_line(colour = "grey20"),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_blank(),
        plot.title.position = "plot"
      ) +
      labs(
        x = sprintf("Observed: \%s", sub(".*_", "", toupper(variable))),
        y = sprintf("Predicted: \%s", sub(".*_", "", toupper(variable))),
        colour = NULL,
        title = sub(".*_", "", toupper(variable))
      ) +
      coord_cartesian(xlim = range_xy, ylim = range_xy)
  })),
  by = "variable"
]
wrap_plots(list_gg[["gg"]], guides = "collect")
}
