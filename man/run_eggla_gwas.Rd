% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_eggla_gwas.R
\name{run_eggla_gwas}
\alias{run_eggla_gwas}
\title{Perform GWAS using PLINK2 (and BCFtools)}
\usage{
run_eggla_gwas(
  data,
  results,
  id_column,
  traits = c("slope_.*", "auc_.*", "^AP_.*", "^AR_.*"),
  covariates,
  vcfs,
  working_directory,
  vep = NULL,
  use_info = TRUE,
  bin_path = list(bcftools = "/usr/bin/bcftools", plink2 = "/usr/bin/plink2"),
  bcftools_view_options = NULL,
  build = "38",
  strand = "+",
  info_type = "IMPUTE2 info score via 'bcftools +impute-info'",
  threads = 1,
  quiet = FALSE,
  clean = TRUE
)
}
\arguments{
\item{data}{Path to the phenotypes stored as a CSV file.}

\item{results}{Paths to the zip archives or directories generated by \code{run_eggla_lmm()}
(vector of length two, one male and one female path).}

\item{id_column}{Name of the column where sample/individual IDs are stored.}

\item{traits}{One or multiple traits, \emph{i.e.}, columns' names from \code{data}, to be analysed separately.}

\item{covariates}{One or several covariates, \emph{i.e.}, columns' names from \code{data}, to be used.
Binary trait should be coded as '1' and '2',
where sex must be coded: '1' = male, '2' = female, 'NA'/'0' = missing.}

\item{vcfs}{Path to the "raw" VCF file(s) containing
the genotypes of the individuals to be analysed.}

\item{working_directory}{Directory in which computation will occur and where output files will be saved.}

\item{vep}{Path to the VEP annotation file to be used to set variants RSIDs and add gene SYMBOL, etc.}

\item{use_info}{A logical indicating whether to extract all informations stored in the "INFO" field.}

\item{bin_path}{A named list containing the path to the PLINK2 and BCFtools binaries
For PLINK2, an URL to the binary can be provided (see https://www.cog-genomics.org/plink/2.0).}

\item{bcftools_view_options}{A string or a vector of strings (which will be pass to \code{paste()})
containing BCFtools view parameters, \emph{e.g.}, \code{"--min-af 0.05"}, \code{"--exclude 'INFO/INFO < 0.8'"},
and/or \code{"--min-alleles 2 --max-alleles 2 --types snps"}.}

\item{build}{Build of the genome on which the SNP is orientated. Default is "38".}

\item{strand}{Orientation of the site to the human genome strand used. Should be "+" (default).}

\item{info_type}{Type of information provided in the INFO column, \emph{e.g.}, "IMPUTE2 info score via 'bcftools +impute-info'",}

\item{threads}{Number of threads to be used by some BCFtools and PLINK2 commands.}

\item{quiet}{A logical indicating whether to suppress the output.}

\item{clean}{A logical indicating whether to clean intermediary files or not.}
}
\value{
Path to results file.
}
\description{
Format VCF file(s) by filtering out all variants
not satisfaying "--min-alleles 2 --max-alleles 2 --types snps"
and setting IDs (if no annotation file using VEP is provided)
with "\%CHROM:\%POS:\%REF:\%ALT" (see https://samtools.github.io/bcftools/).
GWAS is performed on the formatted VCF file(s) by PLINK2 software
(https://www.cog-genomics.org/plink/2.0).
}
\examples{
if (interactive()) {
  data("bmigrowth")
  fwrite(
    x = bmigrowth,
    file = file.path(tempdir(), "bmigrowth.csv")
  )
  results_archives <- run_eggla_lmm(
    data = fread(file.path(tempdir(), "bmigrowth.csv")),
    id_variable = "ID",
    age_days_variable = NULL,
    age_years_variable = "age",
    weight_kilograms_variable = "weight",
    height_centimetres_variable = "height",
    sex_variable = "sex",
    covariates = NULL,
    male_coded_zero = FALSE,
    random_complexity = 1,
    parallel = FALSE,
    parallel_n_chunks = 1,
    working_directory = tempdir()
  )
  run_eggla_gwas(
    data = "/tmp/bmigrowth.csv",
    results = results_archives,
    id_column = "ID",
    traits = c("slope_.*", "auc_.*", "^AP_.*", "^AR_.*"),
    covariates = c("sex"),
    vcfs = list.files(
      path = file.path(tempdir(), "vcf"),
      pattern = "\\\\.vcf$|\\\\.vcf.gz$",
      full.names = TRUE
    ),
    working_directory = tempdir(),
    vep = NULL,
    bin_path = list(
      bcftools = "/usr/bin/bcftools",
      plink2 = "/usr/bin/plink2"
    ),
    threads = 1
  )
}
}
